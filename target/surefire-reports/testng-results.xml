<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="0" total="16" passed="15">
  <reporter-output>
  </reporter-output>
  <suite name="demo.nopecommerce regression testing" duration-ms="296950" started-at="2022-05-07T20:48:53 EET" finished-at="2022-05-07T20:53:50 EET">
    <groups>
      <group name="cucumber">
        <method signature="AbstractTestNGCucumberTests.runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.RunnerTestNG@13c27452]" name="runScenario" class="io.cucumber.testng.AbstractTestNGCucumberTests"/>
      </group> <!-- cucumber -->
    </groups>
    <test name="Regression" duration-ms="296950" started-at="2022-05-07T20:48:53 EET" finished-at="2022-05-07T20:53:50 EET">
      <class name="runner.RunnerTestNG">
        <test-method status="PASS" signature="setUpClass(org.testng.ITestContext)[pri:0, instance:runner.RunnerTestNG@13c27452]" name="setUpClass" is-config="true" duration-ms="3175" started-at="2022-05-07T20:48:53 EET" finished-at="2022-05-07T20:48:56 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@74431832]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpClass -->
        <test-method status="PASS" signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.RunnerTestNG@13c27452]" name="runScenario" duration-ms="21430" started-at="2022-05-07T20:48:56 EET" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-05-07T20:49:18 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA["Registering 3 new customers with valid email"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Registering customers]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method status="PASS" signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.RunnerTestNG@13c27452]" name="runScenario" duration-ms="15540" started-at="2022-05-07T20:49:18 EET" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-05-07T20:49:33 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA["Registering 3 new customers with valid email"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Registering customers]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method status="PASS" signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.RunnerTestNG@13c27452]" name="runScenario" duration-ms="15579" started-at="2022-05-07T20:49:33 EET" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-05-07T20:49:49 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA["Registering 3 new customers with valid email"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Registering customers]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method status="PASS" signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.RunnerTestNG@13c27452]" name="runScenario" duration-ms="18831" started-at="2022-05-07T20:49:49 EET" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-05-07T20:50:08 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA["an already registered user try to register with same data"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Registering customers]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method status="PASS" signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.RunnerTestNG@13c27452]" name="runScenario" duration-ms="16280" started-at="2022-05-07T20:50:08 EET" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-05-07T20:50:24 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA["user could sign in with valid data"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[testing logging in feature]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method status="PASS" signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.RunnerTestNG@13c27452]" name="runScenario" duration-ms="16354" started-at="2022-05-07T20:50:24 EET" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-05-07T20:50:40 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA["user try to log in with a valid email and invalid password"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[testing logging in feature]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method status="PASS" signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.RunnerTestNG@13c27452]" name="runScenario" duration-ms="16691" started-at="2022-05-07T20:50:40 EET" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-05-07T20:50:57 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA["user try to log in with an invalid username"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[testing logging in feature]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method status="PASS" signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.RunnerTestNG@13c27452]" name="runScenario" duration-ms="18667" started-at="2022-05-07T20:50:57 EET" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-05-07T20:51:16 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA["After logging in user could add product to cart"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Adding new product to cart]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method status="PASS" signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.RunnerTestNG@13c27452]" name="runScenario" duration-ms="16145" started-at="2022-05-07T20:51:16 EET" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-05-07T20:51:32 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA["user could add discount code "AutomationDiscount2" that gives 20% discount"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Adding discount code]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method status="PASS" signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.RunnerTestNG@13c27452]" name="runScenario" duration-ms="15525" started-at="2022-05-07T20:51:32 EET" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-05-07T20:51:47 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA["verify that user could not check out a product with out agreeing to the terms of service"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[verify that “Terms of service” is mandator]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method status="PASS" signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.RunnerTestNG@13c27452]" name="runScenario" duration-ms="20621" started-at="2022-05-07T20:51:47 EET" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-05-07T20:52:08 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA["verify that error message will appear that country must be selected to proceed"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[verification that user could not proceed checking out without filling the mandatory data in the billing address]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method status="PASS" signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.RunnerTestNG@13c27452]" name="runScenario" duration-ms="21952" started-at="2022-05-07T20:52:08 EET" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-05-07T20:52:30 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA["verify that error message will appear that city must be filled out"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[verification that user could not proceed checking out without filling the mandatory data in the billing address]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method status="PASS" signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.RunnerTestNG@13c27452]" name="runScenario" duration-ms="24075" started-at="2022-05-07T20:52:30 EET" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-05-07T20:52:54 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA["verify that error message will appear that street addres is required"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[verification that user could not proceed checking out without filling the mandatory data in the billing address]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method status="PASS" signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.RunnerTestNG@13c27452]" name="runScenario" duration-ms="20403" started-at="2022-05-07T20:52:54 EET" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-05-07T20:53:14 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA["verify that error message will appear that postal code is required"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[verification that user could not proceed checking out without filling the mandatory data in the billing address]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method status="PASS" signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.RunnerTestNG@13c27452]" name="runScenario" duration-ms="20467" started-at="2022-05-07T20:53:14 EET" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-05-07T20:53:35 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA["verify that error message will appear that phone is required"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[verification that user could not proceed checking out without filling the mandatory data in the billing address]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method status="FAIL" signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.RunnerTestNG@13c27452]" name="runScenario" duration-ms="13801" started-at="2022-05-07T20:53:35 EET" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-05-07T20:53:49 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA["End to end scenario: User could order a simple computer and check it out"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[E2E Order checkout]"]]>
              </value>
            </param>
          </params>
          <exception class="io.cucumber.testng.UndefinedStepException">
            <message>
              <![CDATA[The step 'user navigate to computers and select desktops' and 5 other step(s) are undefined.
You can implement these steps using the snippet(s) below:

@When("user navigate to computers and select desktops")
public void user_navigate_to_computers_and_select_desktops() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@When("user add the simple computer with slow processor to the shopping cart")
public void user_add_the_simple_computer_with_slow_processor_to_the_shopping_cart() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@When("user navigate to shopping cart and check it out")
public void user_navigate_to_shopping_cart_and_check_it_out() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@When("add the address and continue")
public void add_the_address_and_continue(io.cucumber.datatable.DataTable dataTable) {
    // Write code here that turns the phrase above into concrete actions
    // For automatic transformation, change DataTable to one of
    // E, List<E>, List<List<E>>, List<Map<K,V>>, Map<K,V> or
    // Map<K, List<V>>. E,K,V must be a String, Integer, Float,
    // Double, Byte, Short, Long, BigInteger or BigDecimal.
    //
    // For other transformations you can register a DataTableType.
    throw new io.cucumber.java.PendingException();
}
@When("continue to payment method and enter the payment information:")
public void continue_to_payment_method_and_enter_the_payment_information(io.cucumber.datatable.DataTable dataTable) {
    // Write code here that turns the phrase above into concrete actions
    // For automatic transformation, change DataTable to one of
    // E, List<E>, List<List<E>>, List<Map<K,V>>, Map<K,V> or
    // Map<K, List<V>>. E,K,V must be a String, Integer, Float,
    // Double, Byte, Short, Long, BigInteger or BigDecimal.
    //
    // For other transformations you can register a DataTableType.
    throw new io.cucumber.java.PendingException();
}
@Then("user could see confirmation message: {string}")
public void user_could_see_confirmation_message(String string) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.cucumber.testng.UndefinedStepException: The step 'user navigate to computers and select desktops' and 5 other step(s) are undefined.
You can implement these steps using the snippet(s) below:

@When("user navigate to computers and select desktops")
public void user_navigate_to_computers_and_select_desktops() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@When("user add the simple computer with slow processor to the shopping cart")
public void user_add_the_simple_computer_with_slow_processor_to_the_shopping_cart() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@When("user navigate to shopping cart and check it out")
public void user_navigate_to_shopping_cart_and_check_it_out() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@When("add the address and continue")
public void add_the_address_and_continue(io.cucumber.datatable.DataTable dataTable) {
    // Write code here that turns the phrase above into concrete actions
    // For automatic transformation, change DataTable to one of
    // E, List<E>, List<List<E>>, List<Map<K,V>>, Map<K,V> or
    // Map<K, List<V>>. E,K,V must be a String, Integer, Float,
    // Double, Byte, Short, Long, BigInteger or BigDecimal.
    //
    // For other transformations you can register a DataTableType.
    throw new io.cucumber.java.PendingException();
}
@When("continue to payment method and enter the payment information:")
public void continue_to_payment_method_and_enter_the_payment_information(io.cucumber.datatable.DataTable dataTable) {
    // Write code here that turns the phrase above into concrete actions
    // For automatic transformation, change DataTable to one of
    // E, List<E>, List<List<E>>, List<Map<K,V>>, Map<K,V> or
    // Map<K, List<V>>. E,K,V must be a String, Integer, Float,
    // Double, Byte, Short, Long, BigInteger or BigDecimal.
    //
    // For other transformations you can register a DataTableType.
    throw new io.cucumber.java.PendingException();
}
@Then("user could see confirmation message: {string}")
public void user_could_see_confirmation_message(String string) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

at io.cucumber.core.runtime.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:69)
at io.cucumber.testng.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:23)
at io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$1(TestNGCucumberRunner.java:133)
at io.cucumber.core.runtime.CucumberExecutionContext.lambda$runTestCase$3(CucumberExecutionContext.java:146)
at io.cucumber.core.runtime.RethrowingThrowableCollector.executeAndThrow(RethrowingThrowableCollector.java:23)
at io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:146)
at io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:129)
at io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:35)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1259)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:284)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:119)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- io.cucumber.testng.UndefinedStepException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method status="PASS" signature="tearDownClass()[pri:0, instance:runner.RunnerTestNG@13c27452]" name="tearDownClass" is-config="true" duration-ms="1275" started-at="2022-05-07T20:53:49 EET" finished-at="2022-05-07T20:53:50 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownClass -->
      </class> <!-- runner.RunnerTestNG -->
    </test> <!-- Regression -->
  </suite> <!-- demo.nopecommerce regression testing -->
</testng-results>
